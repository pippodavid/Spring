<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--spring的依赖注入DI
       IOC的作用：
          降低程序间的依赖关系，依赖关系管理交给了spring来维护
          在当前类中需要用到其他类的对象，由spring为我们提供
          我们只需要在配置文件中说明，依赖关系的维护就称为依赖注入
       依赖注入：
           能注入的数据有三类：
              基本类型和String
              其他的在配置文件中配置过的bean类型
              复杂类型/集合类型
           注入的方式：有三种
               第一种：使用构造函数提供
               第二种：使用set方法提供
               第三种; 使用注解提供
    -->

    <!--构造函数的注入：
         使用的标签：constructor-arg
         标签出现的位置：bean标签的内部
         标签中的属性
                type: 用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置是从0开始
                name：用于指定给构造函数中指定名称的参数赋值
                value: 用于提供基本类型和String类型的数据
                ref:用于指定其他的bean类型数据，它指的是在spring的IOC核心容器中出现过的bean对象

          优势：
              在获取bean对象时，注入对象是必须的操作，否则对象无法创建成功
          弊端；
              改变了bean对象的实例化方式，使我们在创建对象时，用不到这些数据，也必须提供
    -->

    <!--bean id="accountService" class="com.david.service.impl.AccountServiceImpl"-->
        <!--constructor-arg type="java.lang.String" value="test">

        </constructor-arg-->

        <!--constructor-arg name="name" value="test">
        </constructor-arg>

        <constructor-arg name="age" value="18">
        </constructor-arg>

        <constructor-arg name="birthday" ref="date">
        </constructor-arg>
    </bean-->



    <!-- set方法注入
        标签的属性
        name：用于指定注入时所调用的set方法名称
                value: 用于提供基本类型和String类型的数据
                ref:用于指定其他的bean类型数据，它指的是在spring的IOC核心容器中出现过的bean对象
        优势：
            创建对象时没有明确的限制，可以直接使用默认构造函数
        弊端；
            如果某个成员必须有值，则获取对象时有可能set方法没有执行
            -->

    <!--配置一个日期对象-->
    <bean id="date" class="java.util.Date"></bean>

    <bean id="accountService_1" class="com.david.service.impl.AccountServiceImpl_1">
        <property name="name" value="test"></property>
        <property name="age" value="20"></property>
        <property name="birthday" ref="date"></property>
    </bean>

    <!--复杂类型注入
        用于给list结构集合注入的标签有list,array,set
        用于给map结构集合注入的标签有props,map
        标签相同结构可以互换，也就是以上五种标签实际可以看成两种不同的就可以了
        只需要记住list，map连个标签基本就够用了-->
    <bean id="accountService_2" class="com.david.service.impl.AccountServiceImpl_2">
        <property name="strs">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>

        <property name="strList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>

        <property name="strSet">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>

        <property name="strMap">
            <map>
                <entry key="0" value="aaa"></entry>
                <entry key="1" value="bbb"></entry>
                <entry key="2" value="ccc"></entry>
            </map>
        </property>

        <property name="myProps">
            <props>
                <prop key="testA">aaa</prop>
                <prop key="testB">bbb</prop>
                <prop key="testC">ccc</prop>
            </props>
        </property>

    </bean>
</beans>